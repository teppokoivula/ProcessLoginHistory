<?php namespace ProcessWire;

/**
 * Hooks for Process Login History
 *
 * This module inserts hooks required by Process Login History module and takes care of saving data into related custom
 * database table. Separated from main module in order to keep ProcessWire from autoloading any unnecessary code.
 * 
 * For more information see README.md.
 *
 * @copyright 2012-2022 Teppo Koivula
 * @license https://www.gnu.org/licenses/old-licenses/gpl-2.0.txt GNU General Public License, version 2
 */
class ProcessLoginHistoryHooks extends WireData implements Module, ConfigurableModule {

    /**
     * Return information about this module (required)
     *
     * @return array
     */
    public static function getModuleInfo() {
        return [
            'title' => 'Login History Hooks',
            'summary' => 'Hooks required by Process Login History for collecting data',
            'href' => 'https://processwire.com/modules/process-login-history/',
            'author' => 'Teppo Koivula',
            'version' => '1.6.2',
            'singular' => true,
            'autoload' => true,
            'requires' => 'ProcessLoginHistory',
        ];
    }

    /**
     * Default configuration for this module
     *
     * The point of putting this in it's own function is so that you don't have to specify
     * these defaults more than once.
     *
     * @return array
     */
    public static function getDefaultData() {
        return [
            'history_max_age' => null,
            'data_max_age_days' => null,
            'schema_version' => 1,
        ];
    }

    /**
     * Name of the custom database table used by this module
     *
     * @var string
     */
    const TABLE_NAME = 'process_login_history';

    /**
     * Schema version of the custom database table
     *
     * @var int
     */
    const SCHEMA_VERSION = 2;

    /**
     * Populate the default config data
     *
     * ProcessWire will automatically overwrite it with anything the user has specifically configured.
     * This is done in construct() rather than init() because ProcessWire populates config data after
     * construct(), but before init().
     */
    public function __construct() {
        foreach (self::getDefaultData() as $key => $value) {
            $this->$key = $value;
        }
    }

    /**
     * Get module configuration inputfields
     *
     * @param array $data
     * @return InputfieldWrapper
     */
    public function getModuleConfigInputfields(array $data) {

        // container for fields
        $fields = $this->wire(new InputfieldWrapper());

        // merge default config settings (custom values overwrite defaults)
        $defaults = self::getDefaultData();
        $data = array_merge($defaults, $data);

        // logging settings
        $logging = $this->modules->get("InputfieldFieldset");
        $logging->name = "logging";
        $logging->label = __("Logging");
        $logging->description = __("These settings define what kind of data gets logged.");
        $logging->icon = "book";
        $fields->add($logging);

        // should we log login attempts for nonexistent users?
        $field = $this->modules->get("InputfieldCheckbox");
        $field->name = "log_nonexistent_users";
        $field->label = __("Log nonexistent users");
        $field->description = __("If this option is selected, attempts to log in as nonexistent users will be logged.");
        $field->checked = !empty($data[$field->name]);
        $logging->add($field);

        // enable logging of user's IP address?
        $field = $this->modules->get("InputfieldCheckbox");
        $field->name = "log_ip_addresses";
        $field->label = __("Log IP addresses");
        $field->description = __("Enable logging IP addresses of users logging in (or attempting to)?");
        $field->notes = __("IP addresses can be considered personal data, which is why logging them is not enabled by default.");
        $field->checked = !empty($data[$field->name]);
        $logging->add($field);

        // give preference to client headers for IP?
        $field = $this->modules->get("InputfieldCheckbox");
        $field->name = "prefer_client_ip";
        $field->label = __("Give preference to client headers for IP?");
        $field->description = __("Enabling this option will use HTTP_CLIENT_IP and HTTP_X_FORWARDED_FOR as primary methods for getting the IP.");
        $field->notes = __("This may be necessary in certain environments, such as when using a load balancer or proxy.");
        $field->showIf = "log_ip_addresses=1";
        $field->checked = !empty($data[$field->name]);
        $logging->add($field);

        // data retention settings
        $data_retention = $this->modules->get("InputfieldFieldset");
        $data_retention->name = "data_retention";
        $data_retention->label = __("Data retention");
        $data_retention->description = __("These settings define how long collected data should be retained for, as well as the circumstances under which it may be erased.");
        $data_retention->icon = "database";
        $fields->add($data_retention);

        // for how long should collected data be retained?
        $field = $this->modules->get("InputfieldSelect");
        $field->name = "history_max_age";
        $field->label = __("Data max age");
        $field->description = __("For how long should we retain collected data?");
        $field->notes = __("Automatic cleanup requires LazyCron module, which isn't currently installed.");
        if ($this->modules->isInstalled("LazyCron")) {
            $field->addOptions([
                '1 WEEK' => __('1 week'),
                '2 WEEK' => __('2 weeks'),
                '1 MONTH' => __('1 month'),
                '2 MONTH' => __('2 months'),
                '3 MONTH' => __('3 months'),
                '6 MONTH' => __('6 months'),
                '1 YEAR' => __('1 year'),
                'num_days' => __('Specific number of days'),
            ]);
            $field->notes = __("Leave empty to disable automatic cleanup.");
            $field->value = isset($data[$field->name]) ? $data[$field->name] : null;
        }
        $data_retention->add($field);

        // alternative to predefined intervals: number of days to retain collected data
        $field = $this->modules->get("InputfieldInteger");
        $field->name = "data_max_age_days";
        $field->label = __("Data max age in days");
        $field->description = __("This setting provides more granular control over the data retention period.");
        $field->notes = __("If you leave this field empty, data will be retained indefinitely.");
        $field->icon = "clock-o";
        $field->value = $data[$field->name] ?? null;
        $field->min = 1;
        $field->showIf = "history_max_age=num_days";
        $data_retention->add($field);

        // limit for collected data rows
        $field = $this->modules->get("InputfieldInteger");
        $field->name = "data_max_rows";
        $field->label = __("Data max rows");
        $field->description = __("How many rows of data should we retain?");
        $field->notes = __("Note that extra rows may be removed if there are identical timestamps. If you leave this field empty, data is not limited by number of rows.");
        $field->icon = "ellipsis-v";
        $field->value = $data[$field->name] ?? null;
        $field->min = 1;
        $data_retention->add($field);

        // prune data now?
        $field = $this->modules->get("InputfieldCheckbox");
        $field->name = "prune_data_now";
        $field->label = __("Prune data now?");
        $field->description = __("If you check this option and save module settings, data retention settings will be applied right away, meaning that any old data will be removed.");
        $field->notes = __('Note: this operation may take a long time.');
        $field->icon = "trash";
        $data_retention->add($field);

        return $fields;
    }

    /**
     * Initialize the module and attach required hooks
     */
    public function init() {

        // update database schema (if not the latest one yet)
        if ($this->schema_version < self::SCHEMA_VERSION) {
            $this->updateDatabaseSchema();
        }

        // remove expired history rows daily
        $this->addHook("LazyCron::everyDay", $this, 'cleanup');

        // trigger data pruning (cleanup) when module config is saved
        $this->addHookBefore('Modules::saveConfig', $this, 'saveConfig');

        // hook after login to save login info into db 
        $this->addHookAfter('Session::login', $this, 'hookLogin');

        // hook after ProcessLogin::buildLoginForm and Tfa::buildAuthCodeForm to add useful extra fields
        $this->addHookAfter('ProcessLogin::buildLoginForm', $this, 'hookBuildLoginForm');
        $this->addHookAfter('Tfa::buildAuthCodeForm', $this, 'hookBuildLoginForm');

        // hook after ProcessPageEdit::buildForm to add latest login rows to user profile (admin only)
        $this->addHookAfter('ProcessPageEdit::buildForm', $this, 'hookProcessPageEditBuildForm');
    }

    /**
     * Delete data older than given interval
     *
     * @param string|null|HookEvent $interval Interval, defaults to history_max_age setting
     * @param null|int $max_rows max rows of data, defaults to data_max_rows setting
     */
    public function cleanup($interval = null, ?int $max_rows = null) {

        // called via LazyCron or null value provided for interval, get history_max_age from module config
        if ($interval instanceof HookEvent || $interval === null) {
            $interval = empty($this->history_max_age) ? null : $this->history_max_age;
        }

        // in case interval is "num_days", get value from the data_max_age_days setting instead
        if ($interval === 'num_days') {
            $interval = $this->data_max_age_days ? (int) $this->data_max_age_days : null;
        }

        // define number of rows
        $max_rows = $max_rows ?? $this->data_max_rows ?? null;
        $max_rows = $max_rows !== null && (int) $max_rows == $max_rows && (int) $max_rows > 0 ? (int) $max_rows : null;

        // delete old data from database
        if ($interval !== null) {
            $interval = is_int($interval) ? $interval . ' DAY' : $this->database->escapeStr($interval);
            $sql = "DELETE FROM " . self::TABLE_NAME . " WHERE login_timestamp < DATE_SUB(NOW(), INTERVAL $interval)";
            try {
                $this->database->exec($sql);
            } catch(\Exception $e) {
                $this->error($e->getMessage());
            }
        }

        // delete extraneous rows from database
        if ($max_rows !== null) {
            $sql = "DELETE FROM " . self::TABLE_NAME . " WHERE login_timestamp <= (SELECT login_timestamp FROM " . self::TABLE_NAME . " ORDER BY login_timestamp DESC LIMIT $max_rows, 1)";
            try {
                $this->database->exec($sql);
            } catch(\Exception $e) {
                $this->error($e->getMessage());
            }
        }
    }

    /**
     * This method gets triggered when module config is saved
     *
     * @param HookEvent $event
     */
    protected function saveConfig(HookEvent $event) {

        // bail out early if saving another module's config
        $class = $event->arguments[0];
        if (is_string($class) && $class !== $this->className || is_object($class) && $class != $this) {
            return;
        }

        // check if "prune data now" option is checked
        $data = $event->arguments[1];
        if (is_array($data) && !empty($data['prune_data_now']) || $data === 'prune_data_now' && !empty($event->arguments[2])) {

            // make sure that latest values are used in case data retention rules are saved during current request
            $interval = is_array($data) && !empty($data['history_max_age']) ? $data['history_max_age'] : null;
            if ($interval === 'num_days') {
                $interval = !empty($data['data_max_age_days']) ? (int) $data['data_max_age_days'] : null;
            }
            $max_rows = is_array($data) && !empty($data['data_max_rows']) ? $data['data_max_rows'] : null;

            // prune data
            $is_valid_interval = $interval !== null || !is_array($data) && $this->history_max_age && ($this->history_max_age !== 'num_days' || !empty($this->data_max_age_days));
            $is_valid_rows = $max_rows !== null;
            if ($is_valid_interval || $is_valid_rows) {
                $this->cleanup($interval, $max_rows);
                $this->message($this->_('Data was pruned according to rules specified by configured data retention settings.'));
            } else {
                $this->warning($this->_('Module settings were saved but data retention rules were not specified, so no data was pruned.'));
            }

            // make sure that "prune data now" option value doesn't get saved
            if (is_array($data)) {
                unset($data['prune_data_now']);
                $event->arguments(1, $data);
            }
            $event->arguments(2, null);
        }
    }

    /**
     * Executed when user has attempted to login
     *
     * This is used for saving login attempts to database table.
     *
     * @param HookEvent $event
     */
    public function hookLogin(HookEvent $event) {

        // default values
        $user_agent = $this->database->escapeStr($_SERVER['HTTP_USER_AGENT']);
        $user_agent_features = [];
        $login_was_successful = 0;
        $user = null;
        $user_id = 0;
        $username = null;

        // first event argument may contain User object or username string
        if ($event->arguments[0] instanceof User) {
            $login_was_successful = 0;
            $user = $event->arguments[0];
            $user_id = $user->id ?: 0;
            $username = $user->name;
        }

        if ($user === null) {
            // filter username from event arguments (note: using htmlentities() instead of $sanitizer->pageName() to keep
            // track of broken / strange input values)
            $username = $this->database->escapeStr(htmlentities($event->arguments[0]));

            // try to get user matching given username
            if (strtolower($username) == $this->sanitizer->pageName($username)) {
                $user = $this->users->get("name=$username");
                if ($user->id) {
                    $user_id = $user->id;
                }
            }
        }

        // check if this event should be logged
        if (!$this->shouldLogLoginEvent($event, $user)) {
            return;
        }

        // check if the login attempt was successful
        if ($event->return !== null) {
            $login_was_successful = 1;
        }

        // user agent features
        if (!empty($_POST['flash'])) $user_agent_features['flash'] = 1;
        if (!empty($_POST['javascript'])) $user_agent_features['javascript'] = 1;
        if (!empty($_POST['screen'])) $user_agent_features['screen'] = $this->sanitizeScreenSize($_POST['screen']);
        if (!empty($_POST['window'])) $user_agent_features['window'] = $this->sanitizeScreenSize($_POST['window']);
        if (!empty($user_agent_features)) {
            foreach ($user_agent_features as &$feature) {
                $feature = wire()->sanitizer->text(str_replace("'", "", $feature));
            }
            $user_agent_features = json_encode($user_agent_features);
        } else {
            $user_agent_features = null;
        }

        // IP address
        $ip_address = $this->log_ip_addresses ? $this->getIP() : null;

        // log login attempt
        $this->insert($user_id, $username, $login_was_successful, $user_agent, $user_agent_features, $ip_address);
    }

    /**
     * Sanitize screen size
     *
     * @param mixed
     * @return string|null
     */
    protected function sanitizeScreenSize($screen_size): ?string {
        if (is_string($screen_size) && preg_match('/^[0-9]+x[0-9]+$/', $screen_size)) {
            return $screen_size;
        }
        return null;
    }

    /**
     * Should we log this login event?
     *
     * @param HookEvent $event Original hook event, provided for hooks
     * @param Page|null $user User may be an object extending Page class (User or NullPage) or null
     * @return bool
     */
    protected function ___shouldLogLoginEvent(HookEvent $event, ?Page $user): bool {

        // bail out early if there's no user and we're not currently logging login attempts for nonexisting users
        if (($user === null || !$user->id) && !$this->log_nonexistent_users) {
            return false;
        }

        return true;
    }

    /**
     * Insert row into database
     *
     * @param int $user_id
     * @param string $username
     * @param int $login_was_successful
     * @param string $user_agent
     * @param string|null $user_agent_features
     * @param string|null $ip_address
     */
    protected function insert(int $user_id, string $username, int $login_was_successful, string $user_agent, ?string $user_agent_features, ?string $ip_address) {
        $sql = "INSERT INTO " . self::TABLE_NAME . " " .
               "(user_id, username, login_was_successful, user_agent, user_agent_features, ip_address) VALUES " .
               "(:user_id, :username, :login_was_successful, :user_agent, :user_agent_features, :ip_address) ";
        try {
            $stmt = $this->database->prepare($sql); 
            $stmt->bindValue(':user_id', $user_id, \PDO::PARAM_INT);
            $stmt->bindValue(':username', $username, \PDO::PARAM_STR);
            $stmt->bindValue(':login_was_successful', $login_was_successful, \PDO::PARAM_INT);
            $stmt->bindValue(':user_agent', $user_agent, \PDO::PARAM_STR);
            $stmt->bindValue(':user_agent_features', $user_agent_features, \PDO::PARAM_STR);
            $stmt->bindValue(':ip_address', $ip_address, \PDO::PARAM_STR);
            $stmt->execute();
        } catch(\Exception $e) {
            $this->error($e->getMessage());
        }
    }

    /**
     * This method is executed after login form markup has been created
     *
     * Note: this method applies to the regular login form as well as the TFA code input form.
     *
     * Used for injecting custom JavaScript file to page, which in turn adds useful extra fields to the form.
     *
     * @param HookEvent $event
     */
    public function hookBuildLoginForm(HookEvent $event) {
        $info = self::getModuleInfo();
        $this->config->scripts->add($this->config->urls->ProcessLoginHistory . "js/login.js?v=" . $info['version']);
    }

    /**
     * Method executed after buildForm method of Process Page Edit
     *
     * The purpose of this mnethod is to add simplified version of login history and links to full
     * data of that particular user into the user edit view.
     *
     * @param HookEvent $event
     */
    public function hookProcessPageEditBuildForm(HookEvent $event) {

        // this only applies to user edit view (admin)
        if ($event->object->page->process != "ProcessUser") return;

        // make sure that current user has view permission to login history page
        $login_history_id = $this->modules->getModuleID("ProcessLoginHistory");
        $login_history_page = $this->pages->get("template=admin, process=$login_history_id");
        if (!$this->user->hasPermission('login-history')) return;

        // get (and validate) user object based on get param "id"
        $user = $this->users->get((int) $this->input->get->id);
        if (!$user->id) return;

        // get latest login attempts (return if no rows are found)
        $sql = "SELECT id, login_timestamp, login_was_successful 
                FROM " . self::TABLE_NAME . " 
                WHERE user_id=:user_id
                ORDER BY login_timestamp DESC
                LIMIT 3";
        $stmt = $this->database->prepare($sql);
        $stmt->bindValue(':user_id', $user->id, \PDO::PARAM_INT);
        $stmt->execute();
        if (!$stmt->rowCount()) return;

        // get config data from main module (for uniform date formatting)
        $config = $this->modules->getModuleConfigData("ProcessLoginHistory");
        if (isset($config['date_format'])) {
            $date_format = $config['date_format'];
        } else {
            /** @var ProcessLoginHistory */
            $loginHistory = $this->modules->get("ProcessLoginHistory");
            $defaults = $loginHistory->getDefaultData();
            $date_format = $defaults['date_format'];
        }

        $markup = "";
        while ($row = $stmt->fetch(\PDO::FETCH_ASSOC)) {

            $login_time = strtotime($row['login_timestamp']);
            $login_date = date($date_format, $login_time);

            $date_diff = date_diff(new \DateTime(), (new \DateTime())->setTimestamp($login_time));
            if ($date_diff->format('%a') < 1) {
                // less than a day since this login attempt
                $date_diff = $date_diff->format('%h');
                if ($date_diff < 1) $date_diff = $this->_("less than an hour ago");
                else $date_diff = sprintf($this->_n("one hour ago", "%d hours ago", $date_diff), $date_diff);
            } else {
                // one or more days since this login attempt
                $date_diff = $date_diff->format('%a');
                $date_diff = sprintf($this->_n("one day ago", "%d days ago", $date_diff), $date_diff);
            }
            $date_diff = ", " . $date_diff;

            // was login attempt successful?
            $status = $this->_("unsuccessful attempt");
            if ($row['login_was_successful']) $status = $this->_("successful attempt");

            // markup for this particular history row
            $more = "<a href='{$login_history_page->url}?id={$row['id']}'>" . $this->_("more") . " &raquo;</a>";
            $markup .= "<li>$login_date <em>($status$date_diff)</em> $more</li>";

        }

        // put together final markup
        $login_info = "<ul>$markup</ul>"
                    . "<p><a href='{$login_history_page->url}?username={$user->name}'>"
                    . $this->_("View entire login history for this user")
                    . " &raquo;</a></p>";
        /** @var InputfieldMarkup */
        $field = $this->modules->get('InputfieldMarkup');
        $field->collapsed = Inputfield::collapsedYes;
        $field->attr('id', 'user-login-history');
        $field->markupText = $login_info;
        $field->label = $this->_("Login History");

        // load main modules styles and add created markup to edit form
        $this->config->styles->add($this->config->urls->ProcessLoginHistory."ProcessLoginHistory.css?v=102");
        $content = $event->return->find('id=ProcessPageEditContent')->first();
        if ($content) {
            $content->append($field);
        } else {
            $submit = $event->return->find('name=submit_save')->first();
            if ($submit) {
                $event->return->insertBefore($field, $submit);
            } else {
                $event->return->append($field);
            }
        }
    }

    /**
     * Update database schema
     *
     * This method applies incremental updates until latest schema version is reached, while also
     * keeping the schema_version config setting up to date.
     * 
     * @throws WireException if database schema version isn't recognized
     * @throws WireException if updating schema to specific version fails
     */
    private function updateDatabaseSchema() {
        while ($this->schema_version < self::SCHEMA_VERSION) {
            ++$this->schema_version;
            switch ($this->schema_version) {
                case 2:
                    $sql = "ALTER TABLE " . self::TABLE_NAME . " ADD ip_address VARCHAR(45) AFTER user_agent_features";
                    break;
                default:
                    throw new WireException("Unrecognized database schema version: {$this->schema_version}");
            }
            if ($sql && $this->database->exec($sql) !== false) {
                $configData = $this->modules->getModuleConfigData($this);
                $configData['schema_version'] = $this->schema_version;
                $this->modules->saveModuleConfigData($this, $configData);
            } else {
                throw new WireException("Couldn't update database schema to version {$this->schema_version}");
            }
        }
    }

    /**
     * Called only when this module is installed
     *
     * Creates new custom database table for storing data.
     */
    public function ___install() {

        // create required database table
        $sql = "
        CREATE TABLE " . self::TABLE_NAME . " (
            id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
            user_id INT(10) UNSIGNED NOT NULL DEFAULT 0,
            username VARCHAR(128) NOT NULL,
            user_agent VARCHAR(256) DEFAULT NULL,
            user_agent_features TEXT DEFAULT NULL,
            login_was_successful BOOLEAN DEFAULT 0,
            login_timestamp TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
        ) ENGINE = MYISAM;
        ";
        $this->database->exec($sql);

        // tell the user that we've created new database table
        $this->message("Created Table: " . self::TABLE_NAME); 
    }

    /**
     * Called only when this module is uninstalled
     *
     * Drops database table created during installation.
     */
    public function ___uninstall() {
        $this->message("Deleting Table: " . self::TABLE_NAME);
        $this->database->exec("DROP TABLE IF EXISTS " . self::TABLE_NAME);
    }

    /**
     * Get IP address for current visitor
     *
     * Almost identical to Session::getIP(), except that we won't use the Client-IP header.
     *
     * @return string IP address
     */
    protected function getIP() {

        // Use REMOTE_ADDR with a fallback to localhost.
        $ip_address = $_SERVER['REMOTE_ADDR'] ?? '127.0.0.1';

        // Check HTTP_X_FORWARDED_FOR in case we're behind a proxy or load balancer.
        if ($this->prefer_client_ip && !empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {
            $lb_ip_address = $_SERVER['HTTP_X_FORWARDED_FOR'];
            if (strpos($lb_ip_address, ',') !== false) {
                // ELB appends addresses to the list, so the last one should be actual client IP.
                list($lb_ip_address) = array_reverse(explode(',', $lb_ip_address));
            }
            $test = str_replace(array('.', ',', ' '), '', $lb_ip_address);
            if (ctype_digit("$test")) {
                $ip_address = $lb_ip_address;
            }
        }

        // Allow overriding IP with config option.
        if (!empty($this->config->sessionForceIP)) {
            $ip_address = $this->config->sessionForceIP;
        }

        // Sanitize by converting to and from integer.
        $ip_address = long2ip(ip2long(trim($ip_address)));

        return $ip_address;
    }

}
