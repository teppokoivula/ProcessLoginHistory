<?php

/**
 * Hooks for Process Login History
 *
 * This module inserts hooks required by Process Login History module and
 * handles saving data to related database table. Separated from main module
 * to keep ProcessWire from autoloading as much unnecessary code as possible.
 * 
 * For detailed information, installation instructions etc. see README.md.
 *
 * @copyright 2012-2018 Teppo Koivula
 * @license http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License, version 2
 */
class ProcessLoginHistoryHooks extends WireData implements Module, ConfigurableModule {
    
    /**
     * Return information about this module (required)
     *
     * @return array
     */
    public static function getModuleInfo() {
        return array(
            'title' => 'Login History Hooks',
            'summary' => 'Hooks required by Process Login History for collecting data',
            'href' => 'http://modules.processwire.com/modules/process-login-history/',
            'author' => 'Teppo Koivula',
            'version' => '1.2.1',
            'singular' => true,
            'autoload' => true,
            'requires' => 'ProcessLoginHistory',
        ); 
    }
    
    /**
     * Default configuration for this module
     *
     * The point of putting this in it's own function is so that you don't have to specify
     * these defaults more than once.
     *
     * @return array
     */
    static public function getDefaultData() {
        return array(
            'schema_version' => 1,
        );
    }
    
    /**
     * Name and latest schema version for database table used by this module
     *
     */
    const TABLE_NAME = 'process_login_history';
    const SCHEMA_VERSION = 2;
    
    /**
     * Populate the default config data
     *
     * ProcessWire will automatically overwrite it with anything the user has specifically configured.
     * This is done in construct() rather than init() because ProcessWire populates config data after
     * construct(), but before init().
     *
     */
    public function __construct() {
        foreach(self::getDefaultData() as $key => $value) {
            $this->$key = $value;
        }
    }
    
    /**
     * Module configuration
     *
     * @param array $data
     * @return InputfieldWrapper
     */
    static public function getModuleConfigInputfields(array $data) {
        
        // this is a container for fields, basically like a fieldset
        $fields = new InputfieldWrapper();
        
        // since this is a static function, we can't use $this->modules, so get them from the global wire() function
        $modules = wire('modules');
        
        // should we log login attempts for nonexistent users?
        $field = $modules->get("InputfieldCheckbox");
        $field->name = "log_nonexistent_users";
        $field->label = __("Log nonexistent users");
        $field->description = __("If this option is selected, attempts to log in as nonexistent users will be logged.");
        if (isset($data[$field->name])) $field->checked = "checked";
        $fields->add($field);
        
        // enable logging of user's IP address?
        $field = $modules->get("InputfieldCheckbox");
        $field->name = "log_ip_addresses";
        $field->label = __("Log IP addresses");
        $field->description = __("Enable logging IP addresses of users logging in (or attempting to)?");
        $field->notes = __("IP addresses can be considered personal data, which is why logging them is not enabled by default.");
        if (isset($data[$field->name])) $field->checked = "checked";
        $fields->add($field);
        
        // for how long should collected data be retained?
        $field = $modules->get("InputfieldSelect");
        $field->name = "history_max_age";
        $field->label = __("Data max age");
        $field->description = __("For how long should we retain collected data?");
        $field->notes = __("Automatic cleanup requires LazyCron module, which isn't currently installed.");
        if ($modules->isInstalled("LazyCron")) {
            $field->addOptions(array(
                '1 WEEK' => __('1 week'),
                '2 WEEK' => __('2 weeks'),
                '1 MONTH' => __('1 month'),
                '2 MONTH' => __('2 months'),
                '3 MONTH' => __('3 months'),
                '6 MONTH' => __('6 months'),
                '1 YEAR' => __('1 year'),
            ));
            $field->notes = __("Leave empty to disable automatic cleanup.");
            $field->value = isset($data[$field->name]) ? $data[$field->name] : null;
        }
        $fields->add($field);
        
        return $fields;
        
    }
    
    /**
     * Initialization function
     *
     * This function attachs required hooks.
     *
     */
    public function init() {
        
        // update database schema (if not the latest one yet)
        if ($this->schema_version < self::SCHEMA_VERSION) {
            $this->updateDatabaseSchema();
        }
        
        // remove expired history rows daily
        $this->addHook("LazyCron::everyDay", $this, 'cleanup');
        
        // hook after login to save login info into db 
        $this->addHookAfter('Session::login', $this, 'hookLogin');
        
        // hook after ProcessLogin::buildLoginForm to add useful extra fields
        $this->addHookAfter('ProcessLogin::buildLoginForm', $this, 'hookBuildLoginForm');
        
        // hook after ProcessPageEdit::buildForm to add latest login rows to user profile (admin only)
        $this->addHookAfter('ProcessPageEdit::buildForm', $this, 'hookProcessPageEditBuildForm');
        
    }
    
    /**
     * Delete data older than given interval
     *
     * @param string|HookEvent $interval Interval, defaults to history_max_age setting
     */
    public function cleanup($interval = null) {
        
        if ($interval instanceof HookEvent) $interval = $this->history_max_age;
        if (is_null($interval) && is_null($this->history_max_age)) return;
        else if (is_null($interval)) $interval = $this->history_max_age;
        
        $interval = $this->database->escapeStr($interval);
        $sql = "DELETE FROM " . self::TABLE_NAME . " WHERE login_timestamp < DATE_SUB(NOW(), INTERVAL $interval)";
        try {
            $this->database->exec($sql);
        } catch(Exception $e) {
            $this->error($e->getMessage());
        }
        
    }
    
    /**
     * Executed when user has attempted to login
     *
     * This is used for saving login attempts to database table.
     *
     * @param HookEvent $event
     */
    public function hookLogin(HookEvent $event) {
        
        // default values
        $user_agent = $this->database->escapeStr($_SERVER['HTTP_USER_AGENT']);
        $user_agent_features = array();
        $login_was_successful = 0;
        $user_id = 0;
        $user = null;
        
        // fetch and filter username from event arguments (using htmlentities() instead of
        // $sanitizer->pageName() to allow keeping track of broken / strange input values)
        $username = $this->database->escapeStr(htmlentities($event->arguments[0]));
        
        // try to get user matching given username
        if (strtolower($username) == $this->sanitizer->pageName($username)) {
            $user = $this->users->get("name=$username");
            if ($user->id) {
                $user_id = $user->id;
                if ($event->return) $login_was_successful = 1;
            }
        }
        if (!$user->id && !$this->log_nonexistent_users) return;
        
        // user agent features
        if (isset($_POST['flash'])) $user_agent_features['flash'] = 1;
        if (isset($_POST['javascript'])) $user_agent_features['javascript'] = 1;
        if (isset($_POST['screen'])) $user_agent_features['screen'] = $_POST['screen'];
        if (isset($_POST['window'])) $user_agent_features['window'] = $_POST['window'];
        if (count($user_agent_features)) {
            foreach ($user_agent_features as &$feature) {
                $feature = wire()->sanitizer->text(str_replace("'", "", $feature));
            }
            $user_agent_features = json_encode($user_agent_features);
        } else {
            $user_agent_features = null;
        }
        
        // REMOTE_ADDR is the IP address from which this request came from, but
        // it could still be that of a proxy. Proxies often use X-Forwarded-For
        // header to identify original source, but headers are unreliable (easy
        // to fake) and thus we wouldn't be able to trust it here anyway.
        $ip_address = $this->log_ip_addresses ? $_SERVER['REMOTE_ADDR'] : null;
        
        // insert new row into database
        $sql = "INSERT INTO " . self::TABLE_NAME . " " .
               "(user_id, username, login_was_successful, user_agent, user_agent_features, ip_address) VALUES " .
               "(:user_id, :username, :login_was_successful, :user_agent, :user_agent_features, :ip_address) ";
        try {
            $stmt = $this->database->prepare($sql); 
            $stmt->bindValue(':user_id', $user_id, PDO::PARAM_INT);
            $stmt->bindValue(':username', $username, PDO::PARAM_STR);
            $stmt->bindValue(':login_was_successful', $login_was_successful, PDO::PARAM_INT);
            $stmt->bindValue(':user_agent', $user_agent, PDO::PARAM_STR);
            $stmt->bindValue(':user_agent_features', $user_agent_features, PDO::PARAM_STR);
            $stmt->bindValue(':ip_address', $ip_address, PDO::PARAM_STR);
            $stmt->execute();
        } catch(Exception $e) {
            $this->error($e->getMessage());
        }
        
    }
    
    /**
     * This function is executed after login form markup has been created
     *
     * Used for injecting custom JavaScript file to page, which in turn adds
     * useful extra fields to the form.
     *
     * @param HookEvent $event
     */
    public function hookBuildLoginForm(HookEvent $event) {
        $info = self::getModuleInfo();
        $this->config->scripts->add($this->config->urls->ProcessLoginHistory."js/login.js?v={$info['version']}");
    }
    
    /**
     * Function executed after buildForm method of Process Page Edit
     *
     * The purpose of this is to add simplified version of login history
     * and links to full data of that particular user to user edit view.
     *
     * @param HookEvent $event
     */
    public function hookProcessPageEditBuildForm(HookEvent $event) {
        
        // this only applies to user edit view (admin)
        if ($event->object->page->process != "ProcessUser") return;
        
        // make sure that current user has view permission to login history page
        $login_history_id = $this->modules->getModuleID("ProcessLoginHistory");
        $login_history_page = $this->pages->get("template=admin, process=$login_history_id");
        if (!$this->user->hasPermission('view', $login_history_page)) return;
        
        // get (and validate) user object based on get param "id"
        $user = $this->users->get((int) $this->input->get->id);
        if (!$user->id) return;
        
        // get latest login attempts (return if no rows are found)
        $sql = "SELECT id, login_timestamp, login_was_successful 
                FROM " . self::TABLE_NAME . " 
                WHERE user_id=:user_id
                ORDER BY login_timestamp DESC
                LIMIT 3";
        $stmt = $this->database->prepare($sql);
        $stmt->bindValue(':user_id', $user->id, PDO::PARAM_INT);
        $stmt->execute();
        if (!$stmt->rowCount()) return;
        
        // get config data from main module (for uniform date formatting)
        $config = $this->modules->getModuleConfigData("ProcessLoginHistory");
        if (isset($config['date_format'])) {
            $date_format = $config['date_format'];
        } else {
            $defaults = $this->modules->get("ProcessLoginHistory")->getDefaultData();
            $date_format = $defaults['date_format'];
        }
        
        $markup = "";
        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
            
            $login_date = date($date_format, strtotime($row['login_timestamp']));
            
            // make sure that currently used PHP version has DateTime implemented
            if (version_compare(PHP_VERSION, '5.3.0') >= 0) {
                $date_diff = date_diff(date_create(), date_create($login_date));
                if ($date_diff->format('%a') < 1) {
                    // less than a day since this login attempt
                    $date_diff = $date_diff->format('%h');
                    if ($date_diff < 1) $date_diff = __("less than an hour ago");
                    else $date_diff = sprintf(_n("one hour ago", "%d hours ago", $date_diff), $date_diff);
                } else {
                    // one or more days since this login attempt
                    $date_diff = $date_diff->format('%a');
                    $date_diff = sprintf(_n("one day ago", "%d days ago", $date_diff), $date_diff);
                }
                $date_diff = ", " . $date_diff;
            } else {
                // calculating date differences tends to get messy and there's no
                // real need to offer alternative solution for older PHP versions
                $date_diff = "";
            }
            
            // was login attempt succesful?
            $status = __("unsuccessful attempt");
            if ($row['login_was_successful']) $status = __("successful attempt");
            
            // markup for this particular history row
            $more = "<a href='{$login_history_page->url}?id={$row['id']}'>" . __("more") . " &raquo;</a>";
            $markup .= "<li>$login_date <em>($status$date_diff)</em> $more</li>";
            
        }
        
        // put together final markup
        $login_info = "<ul>$markup</ul>"
                    . "<p><a href='{$login_history_page->url}?username={$user->name}'>"
                    . __("View entire login history for this user")
                    . " &raquo;</a></p>";
        $field = $this->modules->get('InputfieldMarkup');
        $field->collapsed = Inputfield::collapsedYes;
        $field->attr('id', 'user-login-history');
        $field->markupText = $login_info;
        $field->label = __("Login History");
        
        // load main modules styles and add created markup to edit form
        $this->config->styles->add($this->config->urls->ProcessLoginHistory."ProcessLoginHistory.css?v=102");
        $submit = $event->return->find('name=submit_save')->first();
        $event->return->insertBefore($field, $submit);
        
    }
    
    /**
     * Update database schema
     *
     * This method applies incremental updates until latest schema version is
     * reached, while also keeping schema_version config setting up to date.
     * 
     * @throws WireException if database schema version isn't recognized
     * @throws WireException if updating schema to specific version fails
     */
    private function updateDatabaseSchema() {
        while ($this->schema_version < self::SCHEMA_VERSION) {
            ++$this->schema_version;
            switch ($this->schema_version) {
                case 2:
                    $sql = "ALTER TABLE " . self::TABLE_NAME . " ADD ip_address VARCHAR(45) AFTER user_agent_features";
                    break;
                default:
                    throw new WireException("Unrecognized database schema version: {$this->schema_version}");
            }
            if ($sql && $this->database->exec($sql) !== false) {
                $configData = $this->modules->getModuleConfigData($this);
                $configData['schema_version'] = $this->schema_version;
                $this->modules->saveModuleConfigData($this, $configData);
            } else {
                throw new WireException("Couldn't update database schema to version {$this->schema_version}");
            }
        }
    }
    
    /**
     * Called only when this module is installed
     *
     * Creates new custom database table for storing data.
     *
     */
    public function ___install() {
        
        // create required database table
        $sql = "
        CREATE TABLE " . self::TABLE_NAME . " (
            id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
            user_id INT(10) UNSIGNED NOT NULL DEFAULT 0,
            username VARCHAR(128) NOT NULL,
            user_agent VARCHAR(256) DEFAULT NULL,
            user_agent_features TEXT DEFAULT NULL,
            login_was_successful BOOLEAN DEFAULT 0,
            login_timestamp TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
        ) ENGINE = MYISAM;
        ";
        $this->database->exec($sql);
        
        // tell the user that we've created new database table
        $this->message("Created Table: " . self::TABLE_NAME); 
        
    }
    
    /**
     * Called only when this module is uninstalled
     *
     * Drops database table created during installation.
     *
     */
    public function ___uninstall() {
        $this->message("Deleting Table: " . self::TABLE_NAME);
        $this->database->exec("DROP TABLE IF EXISTS " . self::TABLE_NAME);
    }
    
}
